{"version":3,"file":"static/js/847.212e3525.chunk.js","mappings":"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","sources":["components/TextField.jsx","../node_modules/@chakra-ui/card/dist/chunk-4DHADF5X.mjs","../node_modules/@chakra-ui/card/dist/chunk-S432VF2S.mjs","../node_modules/@chakra-ui/card/dist/chunk-W3H6TFKV.mjs","../node_modules/@chakra-ui/card/dist/chunk-KKEJMMX3.mjs","../node_modules/@chakra-ui/layout/dist/chunk-MZBQPWGD.mjs","pages/ProfilePage.jsx"],"sourcesContent":["import { FormControl, FormErrorMessage, FormLabel } from '@chakra-ui/form-control';\r\nimport { Input } from '@chakra-ui/input';\r\nimport { Field, useField } from 'formik';\r\n\r\nconst TextField = ({ label, type, name, placeholder }) => {\r\n  const [field, meta] = useField({ type, name, placeholder });\r\n\r\n  return (\r\n    <FormControl isInvalid={meta.error && meta.touched} mb={'6'}>\r\n      <FormLabel noOfLines={1}>{label}</FormLabel>\r\n      <Field as={Input} {...field} type={type} name={name} placeholder={placeholder} />\r\n      <FormErrorMessage>{meta.error}</FormErrorMessage>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default TextField;\r\n","// src/card-context.tsx\nimport { createStylesContext } from \"@chakra-ui/system\";\nvar [CardStylesProvider, useCardStyles] = createStylesContext(\"Card\");\n\nexport {\n  CardStylesProvider,\n  useCardStyles\n};\n","import {\n  CardStylesProvider\n} from \"./chunk-4DHADF5X.mjs\";\n\n// src/card.tsx\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport {\n  forwardRef,\n  chakra,\n  omitThemingProps,\n  useMultiStyleConfig\n} from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Card = forwardRef(function Card2(props, ref) {\n  const {\n    className,\n    children,\n    direction = \"column\",\n    justify,\n    align,\n    ...rest\n  } = omitThemingProps(props);\n  const styles = useMultiStyleConfig(\"Card\", props);\n  return /* @__PURE__ */ jsx(\n    chakra.div,\n    {\n      ref,\n      className: cx(\"chakra-card\", className),\n      __css: {\n        display: \"flex\",\n        flexDirection: direction,\n        justifyContent: justify,\n        alignItems: align,\n        position: \"relative\",\n        minWidth: 0,\n        wordWrap: \"break-word\",\n        ...styles.container\n      },\n      ...rest,\n      children: /* @__PURE__ */ jsx(CardStylesProvider, { value: styles, children })\n    }\n  );\n});\n\nexport {\n  Card\n};\n","import {\n  useCardStyles\n} from \"./chunk-4DHADF5X.mjs\";\n\n// src/card-header.tsx\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { forwardRef, chakra } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar CardHeader = forwardRef(\n  function CardHeader2(props, ref) {\n    const { className, ...rest } = props;\n    const styles = useCardStyles();\n    return /* @__PURE__ */ jsx(\n      chakra.div,\n      {\n        ref,\n        className: cx(\"chakra-card__header\", className),\n        __css: styles.header,\n        ...rest\n      }\n    );\n  }\n);\n\nexport {\n  CardHeader\n};\n","import {\n  useCardStyles\n} from \"./chunk-4DHADF5X.mjs\";\n\n// src/card-body.tsx\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { forwardRef, chakra } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar CardBody = forwardRef(function CardBody2(props, ref) {\n  const { className, ...rest } = props;\n  const styles = useCardStyles();\n  return /* @__PURE__ */ jsx(\n    chakra.div,\n    {\n      ref,\n      className: cx(\"chakra-card__body\", className),\n      __css: styles.body,\n      ...rest\n    }\n  );\n});\n\nexport {\n  CardBody\n};\n","// src/stack/stack-divider.tsx\nimport { chakra } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar StackDivider = (props) => /* @__PURE__ */ jsx(\n  chakra.div,\n  {\n    className: \"chakra-stack__divider\",\n    ...props,\n    __css: {\n      ...props[\"__css\"],\n      borderWidth: 0,\n      alignSelf: \"stretch\",\n      borderColor: \"inherit\",\n      width: \"auto\",\n      height: \"auto\"\n    }\n  }\n);\nStackDivider.displayName = \"StackDivider\";\n\nexport {\n  StackDivider\n};\n","import {\r\n  Box,\r\n  Button,\r\n  FormControl,\r\n  Heading,\r\n  Stack,\r\n  AlertIcon,\r\n  AlertDescription,\r\n  AlertTitle,\r\n  Flex,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  StackDivider,\r\n  useToast,\r\n  Alert,\r\n} from '@chakra-ui/react';\r\nimport TextField from '../components/TextField';\r\nimport { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { updateProfile, resetUpdateSuccess } from '../redux/actions/userActions';\r\n\r\nconst ProfilePage = () => {\r\n  const dispatch = useDispatch();\r\n  const user = useSelector((state) => state.user);\r\n  const { userInfo, loading, error, updateSuccess } = user;\r\n  const toast = useToast();\r\n\r\n  useEffect(() => {\r\n    if (updateSuccess) {\r\n      toast({\r\n        description: 'Profile saved.',\r\n        status: 'success',\r\n        isClosable: true,\r\n      });\r\n      dispatch(resetUpdateSuccess());\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [toast, updateSuccess]);\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        name: userInfo.name,\r\n        email: userInfo.email,\r\n        password: '',\r\n        confirmPassword: '',\r\n      }}\r\n      validationSchema={Yup.object({\r\n        name: Yup.string().required('A name is required.'),\r\n        email: Yup.string().email('Invalid email.').required('An email address is required.'),\r\n        password: Yup.string(),\r\n\r\n        confirmPassword: Yup.string().oneOf([Yup.ref('password'), null], 'Password must match. '),\r\n      })}\r\n      onSubmit={(values) => {\r\n        dispatch(updateProfile(userInfo._id, values.name, values.email, values.password));\r\n      }}\r\n    >\r\n      {(formik) => (\r\n        <Box\r\n          minH={'100vh'}\r\n          minW={{ base: '1xl', lg: '5xl' }}\r\n          mx={'auto'}\r\n          px={{ base: '4', md: '8', lg: '12' }}\r\n          py={{ base: '6', md: '8', lg: '12' }}\r\n        >\r\n          <Stack\r\n            direction={{ base: 'column', md: 'row' }}\r\n            spacing={'10'}\r\n            justify={'center'}\r\n            align={{ lg: 'flex-start' }}\r\n          >\r\n            <Stack spacing={'10'} flex={'1.5'} mb={{ base: '2xl', md: 'none' }} maxW={'700px'}>\r\n              <Heading fontSize={'2xl'} fontWeight={'extrabold'}>\r\n                Profile\r\n              </Heading>\r\n              <Stack spacing={'6'}>\r\n                <Stack spacing={'6'} as={'form'} onSubmit={formik.handleSubmit}>\r\n                  {error && (\r\n                    <Alert\r\n                      status='error'\r\n                      flexDirection={'column'}\r\n                      alignItems={'center'}\r\n                      justifyContent={'center'}\r\n                      textAlign={'center'}\r\n                    >\r\n                      <AlertIcon />\r\n                      <AlertTitle>We are sorry!</AlertTitle>\r\n                      <AlertDescription>{error}</AlertDescription>\r\n                    </Alert>\r\n                  )}\r\n\r\n                  <Stack spacing={'5'}>\r\n                    <FormControl>\r\n                      <TextField\r\n                        type={'text'}\r\n                        name={'name'}\r\n                        placeholder={'Your first and last name'}\r\n                        label={'Full Name'}\r\n                      />\r\n                      <TextField type={'text'} name={'email'} placeholder={'you@example.com'} label={'Email'} />\r\n                      <TextField type={'password'} name={'password'} placeholder={'your password'} label={'Password'} />\r\n                      <TextField\r\n                        type={'password'}\r\n                        name={'confirmPassword'}\r\n                        placeholder={'Confirm your password'}\r\n                        label={'Confirm your password'}\r\n                      />\r\n                    </FormControl>\r\n                  </Stack>\r\n                  <Stack spacing={'6'}>\r\n                    <Button colorScheme='orange' size={'lg'} fontSize={'md'} isLoading={loading} type='submit'>\r\n                      Save\r\n                    </Button>\r\n                  </Stack>\r\n                </Stack>\r\n              </Stack>\r\n            </Stack>\r\n            <Flex direction={'column'} align={'center'} flex={'1'} _dark={{ bg: 'gray.900' }} maxW={'550px'}>\r\n              <Card>\r\n                <CardHeader>\r\n                  <Heading size={'md'}>User Report</Heading>\r\n                </CardHeader>\r\n                <CardBody>\r\n                  <Stack divider={<StackDivider />} spacing={'4'}>\r\n                    <Box pt={'2'} fontSize={'sm'}>\r\n                      Registered on {new Date(userInfo.createdAt).toDateString()}\r\n                    </Box>\r\n                  </Stack>\r\n                </CardBody>\r\n              </Card>\r\n            </Flex>\r\n          </Stack>\r\n        </Box>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default ProfilePage;\r\n"],"names":["_ref","label","type","name","placeholder","_useField","useField","_useField2","_slicedToArray","field","meta","_jsxs","FormControl","isInvalid","error","touched","mb","children","_jsx","FormLabel","noOfLines","Field","_objectSpread","as","Input","FormErrorMessage","_createStylesContext","createStylesContext","_createStylesContext2","CardStylesProvider","useCardStyles","Card","forwardRef","props","ref","_omitThemingProps","omitThemingProps","className","_omitThemingProps$dir","direction","justify","align","rest","_objectWithoutProperties","_excluded","styles","useMultiStyleConfig","jsx","chakra","cx","__css","display","flexDirection","justifyContent","alignItems","position","minWidth","wordWrap","container","value","CardHeader","header","CardBody","body","StackDivider","borderWidth","alignSelf","borderColor","width","height","displayName","dispatch","useDispatch","user","useSelector","state","userInfo","loading","updateSuccess","toast","useToast","useEffect","description","status","isClosable","resetUpdateSuccess","Formik","initialValues","email","password","confirmPassword","validationSchema","Yup","required","oneOf","onSubmit","values","updateProfile","_id","formik","Box","minH","minW","base","lg","mx","px","md","py","Stack","spacing","flex","maxW","Heading","fontSize","fontWeight","handleSubmit","Alert","textAlign","AlertIcon","AlertTitle","AlertDescription","TextField","Button","colorScheme","size","isLoading","Flex","_dark","bg","divider","pt","Date","createdAt","toDateString"],"sourceRoot":""}